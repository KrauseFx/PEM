#!/usr/bin/env ruby

$:.push File.expand_path("../../lib", __FILE__)

require 'pem'
require 'commander'
require 'credentials_manager/password_manager'
require 'credentials_manager/appfile_config'

HighLine.track_eof = false

class PemApplication
  include Commander::Methods

  def run
    program :version, PEM::VERSION
    program :description, 'CLI for \'PEM\' - Automatically generate and renew your push notification profiles'
    program :help, 'Author', 'Felix Krause <pem@krausefx.com>'
    program :help, 'Website', 'http://fastlane.tools'
    program :help, 'GitHub', 'https://github.com/krausefx/PEM'
    program :help_formatter, :compact

    always_trace!

    global_option '--development', 'Renew the development push certificate instead of the production one'
    global_option '-u', '--username STRING', 'Your Apple ID username'
    global_option '-a', '--identifier STRING', String, 'The bundle identifier of your app'

    global_option '-pay', 'Add Apple Pay support to the App ID'

    command :renew do |c|
      c.syntax = 'pem renew'
      c.description = 'Renews the certificate (in case it expired) and shows the path to the generated pem file'

      c.action do |args, options|
        app = app_identifier(options)
        username(options)

        path = PEM::CertManager.new.run(app, !options.development)

        if path
          file_name = File.basename(path)
          output = "./#{file_name}"
          FileUtils.mv(path, output)
          puts output.green
        end
      end
    end

    default_command :renew

    run!
  end

  def username(options)
    user = options.username
    user ||= ENV["PEM_USERNAME"]
    user ||= CredentialsManager::AppfileConfig.try_fetch_value(:apple_id)

    CredentialsManager::PasswordManager.shared_manager(user) if user
  end

  def app_identifier(options)
    value = options.identifier
    value ||= ENV["PEM_APP_IDENTIFIER"]
    value ||= CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    value ||= ask("App Identifier (Bundle ID, e.g. com.krausefx.app): ")
    return value
  end

end

PemApplication.new.run
